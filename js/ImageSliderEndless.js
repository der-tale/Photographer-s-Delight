// Generated by CoffeeScript 1.4.0
(function() {
  var ImageSliderEndless, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ImageSliderEndless = (function(_super) {

    __extends(ImageSliderEndless, _super);

    function ImageSliderEndless() {
      return ImageSliderEndless.__super__.constructor.apply(this, arguments);
    }

    ImageSliderEndless.prototype.imageOpacity = 1;

    ImageSliderEndless.prototype._calculateDirection = function(currentImage, nextImage) {
      if (currentImage < nextImage) {
        if (nextImage - currentImage < this.imageCount + currentImage - nextImage) {
          return "left";
        } else {
          return "right";
        }
      } else {
        if (currentImage - nextImage < this.imageCount + nextImage - currentImage) {
          return "right";
        } else {
          return "left";
        }
      }
    };

    ImageSliderEndless.prototype._animate = function() {
      var next, offset;
      next = ImageSliderEndless.__super__._animate.apply(this, arguments);
      if (next > -1) {
        if (this.currentImage > -1) {
          if (this._calculateDirection(this.currentImage, next) === 'left') {
            offset = this.options.viewport.width();
          } else {
            offset = -this.options.viewport.width();
          }
          this.images[this.currentImage].image.animate({
            left: '-=' + offset
          }, this.options.duration);
          this.images[next].image.css({
            left: (this.calculateOffset(this._imageDimensions(this.options.viewport), this._imageDimensions(this.images[next].image), 'x')) + offset
          });
          this.images[next].image.show();
          this.images[next].image.animate({
            left: '-=' + offset,
            useTranslate3d: true
          }, this.options.duration, this._animateFinished);
        } else {
          this.images[next].image.show();
          this._animateFinished();
        }
        return this.currentImage = next;
      }
    };

    return ImageSliderEndless;

  })(ImageChanger);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ImageSliderEndless = ImageSliderEndless;

}).call(this);
